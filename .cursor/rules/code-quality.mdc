---
globs: *.cs
description: 代码质量标准和最佳实践
---

# 代码质量标准

## 命名规范

### 类和方法命名
```csharp
// ✅ 正确 - 使用描述性名称
public class NumericUpDownWithUnit : NumericUpDown
public decimal ValueInCentimeters { get; set; }
public static NumericUpDownWithUnit CreateNumericInput(...)

// ❌ 错误 - 使用缩写或不清晰名称
public class NUD : NumericUpDown
public decimal Val { get; set; }
public static NUD Create(...)
```

### 变量命名
```csharp
// ✅ 正确 - 使用有意义的名称
var numberIndentControl = container.Controls.Find("TxtBoxNumIndent" + level, true);
var inputValues = InputHelper.GetInputValues(container, level);

// ❌ 错误 - 使用无意义名称
var ctrl = container.Controls.Find("txt" + level, true);
var vals = InputHelper.GetValues(container, level);
```

## 代码组织

### 方法长度
- 单个方法不超过50行
- 复杂逻辑拆分为多个方法
- 使用辅助类封装通用功能

### 类职责
```csharp
// ✅ 正确 - 单一职责
public static class InputHelper  // 专门处理输入控件
public static class WordAPIHelper  // 专门处理Word API
public class NumericUpDownWithUnit  // 专门处理数值输入

// ❌ 错误 - 职责混乱
public class Utility  // 包含各种不相关功能
```

## 错误处理

### 异常处理模式
```csharp
// ✅ 正确 - 具体异常处理
try
{
    var result = WordAPIHelper.GetWordApplication();
}
catch (Exception ex)
{
    throw new Exception($"获取Word应用程序失败：{ex.Message}");
}

// ❌ 错误 - 忽略异常
try
{
    var result = WordAPIHelper.GetWordApplication();
}
catch
{
    // 什么都不做
}
```

### 参数验证
```csharp
// ✅ 正确 - 参数验证
public static void SetInputValues(Control container, int level, decimal numberIndent, decimal textIndent, decimal tabPosition)
{
    if (container == null) throw new ArgumentNullException(nameof(container));
    if (level < 1) throw new ArgumentException("级别必须大于0", nameof(level));
    // ...
}
```

## 性能优化

### 避免重复计算
```csharp
// ✅ 正确 - 缓存计算结果
private decimal _cachedValue;
public decimal ValueInCentimeters
{
    get
    {
        if (_cachedValue == 0)
        {
            _cachedValue = CalculateValue();
        }
        return _cachedValue;
    }
}

// ❌ 错误 - 重复计算
public decimal ValueInCentimeters => CalculateValue(); // 每次访问都计算
```

### 使用StringBuilder
```csharp
// ✅ 正确 - 使用StringBuilder
var sb = new StringBuilder();
for (int i = 1; i <= level; i++)
{
    sb.Append("%" + i);
    if (i < level) sb.Append(".");
}
return sb.ToString();

// ❌ 错误 - 字符串拼接
string result = "";
for (int i = 1; i <= level; i++)
{
    result += "%" + i;
    if (i < level) result += ".";
}
return result;
```

## 注释规范

### 方法注释
```csharp
/// <summary>
/// 创建带单位的数值输入框
/// </summary>
/// <param name="wordApp">Word应用程序实例</param>
/// <param name="name">控件名称</param>
/// <param name="location">控件位置</param>
/// <param name="size">控件大小</param>
/// <param name="unit">单位类型</param>
/// <returns>配置好的数值输入框</returns>
public static NumericUpDownWithUnit CreateNumericInput(Microsoft.Office.Interop.Word.Application wordApp, 
    string name, Point location, Size size, NumericUpDownWithUnit.UnitType unit = NumericUpDownWithUnit.UnitType.Centimeters)
```

### 复杂逻辑注释
```csharp
// 使用Word API进行字符到厘米的转换
// 需要考虑当前字体大小，确保转换准确性
private decimal ConvertCharactersToCentimeters(decimal characters)
{
    try
    {
        if (_wordApp?.Selection?.Range?.Font?.Size != null)
        {
            // 获取当前字体大小
            float fontSize = _wordApp.Selection.Range.Font.Size;
            
            // 使用Word API计算字符宽度
            // 创建临时文本来测量字符宽度
            var tempRange = _wordApp.Selection.Range;
            // ...
        }
    }
    catch (Exception ex)
    {
        // 异常时使用默认转换
        return characters * 0.5m;
    }
}
```

## 代码复用

### 使用辅助类
```csharp
// ✅ 正确 - 使用InputHelper统一创建控件
var nudNumberIndent = InputHelper.CreateNumericInput(app, "TxtBoxNumIndent" + level, location, size);
var cmbNumberStyle = InputHelper.CreateNumberStyleCombo("CmbNumStyle" + level, location);

// ❌ 错误 - 重复创建代码
var nudNumberIndent = new NumericUpDownWithUnit(app, NumericUpDownWithUnit.UnitType.Centimeters)
{
    Name = "TxtBoxNumIndent" + level,
    Location = location,
    Size = size
};
// 重复的创建代码...
```

## 测试友好

### 依赖注入
```csharp
// ✅ 正确 - 支持依赖注入
public NumericUpDownWithUnit(Microsoft.Office.Interop.Word.Application wordApp = null, UnitType unit = UnitType.Centimeters)
{
    _wordApp = wordApp ?? WordAPIHelper.GetWordApplication();
    // ...
}

// ❌ 错误 - 硬编码依赖
public NumericUpDownWithUnit()
{
    _wordApp = Globals.ThisAddIn.Application; // 难以测试
}
```

## 文件组织

### 文件结构
```
WordMan_VSTO/
├── ThisAddIn.cs              # 主入口
├── WordAPIHelper.cs          # Word API工具
├── MultiLevelList.cs         # 功能模块
├── StyleSetting/             # 样式设置模块
│   ├── StyleSettings.cs
│   └── StyleSettingsUIDesigner.cs
└── .cursor/rules/            # Cursor规则
    ├── word-api-priority.mdc
    ├── vsto-development.mdc
    └── code-quality.mdc
```

## 检查清单

在提交代码前，请确保：

1. ✅ 遵循命名规范
2. ✅ 方法长度合理
3. ✅ 类职责单一
4. ✅ 包含错误处理
5. ✅ 参数验证完整
6. ✅ 性能优化到位
7. ✅ 注释清晰完整
8. ✅ 代码复用良好
9. ✅ 测试友好
10. ✅ 文件组织合理