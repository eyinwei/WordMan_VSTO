---
alwaysApply: true
description: VSTO开发标准和最佳实践
---

# VSTO 开发标准

## 框架兼容性

### .NET 4.0 框架要求
- 必须基于 .NET Framework 4.0 进行开发
- 确保代码在 Windows 7 系统及 Office 2013 等环境中可正常运行
- 具备广泛兼容性，支持较老的系统环境
- 使用 C# 7.3语法

### 兼容性检查清单
```csharp
// ✅ 正确 - 使用 .NET 4.0 兼容的语法
var list = new List<string>();
foreach (var item in list) { }

// ❌ 错误 - 使用 C# 8.0+ 语法（不兼容 .NET 4.0）
var list = new List<string>();
foreach (var item in list)
{
    // 使用模式匹配等新特性
}
```


## Word API 优先原则

### 优先使用 Word 自带 API
```csharp
// ✅ 正确 - 直接使用 Word API
var app = Globals.ThisAddIn.Application;
var doc = app.ActiveDocument;
var range = doc.Range();
range.Font.Size = 12;

// ❌ 错误 - 避免重复造轮子
// 不要创建不必要的 WordAPIHelper 类
```

### Word API 使用规范
```csharp
// ✅ 正确 - 使用 Word 内置方法
var styles = doc.Styles;
var font = range.Font;
font.Bold = (int)WdConstants.wdToggle;

// ✅ 正确 - 使用 Word 单位转换
decimal centimeters = (decimal)app.PointsToCentimeters(points);
float points = app.CentimetersToPoints(centimeters);
```

## 代码简洁性

### 简单功能直接实现
```csharp
// ✅ 正确 - 简单功能直接实现
private void SetFontSize(float size)
{
    var range = Globals.ThisAddIn.Application.Selection.Range;
    range.Font.Size = size;
}

// ❌ 错误 - 过度封装简单功能
// 不要为简单的字体设置创建复杂的类层次
```

### 避免不必要的抽象
```csharp
// ✅ 正确 - 适度抽象复杂功能
public class MultiLevelListManager
{
    public void CreateList() { }
    public void ApplyStyles() { }
}

// ❌ 错误 - 过度抽象简单功能
// 不要为每个简单操作创建独立类
```

### 避免不正式、解释性的注释
```csharp
// ✅ 正确 - 适度正式化注释内容
public class MultiLevelListManager
    垂直方向：相对于页边距，文本框底部与页边距对齐

// ❌ 错误 - 注释过度解释

```


## 面向对象设计

### 复杂功能适度抽象
```csharp
// ✅ 正确 - 复杂功能使用类封装
public class LevelStyleSettingsForm : Form
{
    private List<WordStyleInfo> LevelStyles;
    public void LoadExistingStyles(List<WordStyleInfo> styles) { }
    public List<WordStyleInfo> GetLevelStyles() { }
}

// ✅ 正确 - 数据管理使用专门类
public class MultiLevelDataManager
{
    public static decimal ConvertUnits(decimal value, string fromUnit, string toUnit) { }
    public static string ConvertFontSizeToString(float size) { }
}
```

## 命名规范

### 类和方法命名
```csharp
// ✅ 正确 - 使用描述性名称
public class MultiLevelListControlFactory
public decimal ValueInCentimeters { get; set; }
public static NumericUpDownWithUnit CreateNumericInput(...)

// ❌ 错误 - 使用缩写或不清晰名称
public class MLF
public decimal Val { get; set; }
public static NUD Create(...)
```

### 变量命名
```csharp
// ✅ 正确 - 使用有意义的名称
var levelStyleSettings = new List<WordStyleInfo>();
var currentLevels = 9;

// ❌ 错误 - 使用无意义名称
var list = new List<WordStyleInfo>();
var num = 9;
```

## 引用管理

### 明确所有引用
```csharp
// ✅ 正确 - 使用别名避免歧义
using Font = System.Drawing.Font;
using Point = System.Drawing.Point;
using Color = System.Drawing.Color;
using Microsoft.Office.Interop.Word;

// ❌ 错误 - 歧义引用
Point location = new Point(100, 200); // 编译器不知道是哪个Point
```

### using 语句组织
```csharp
// ✅ 正确 - 按功能分组
using System;
using System.Drawing;
using System.Windows.Forms;
using Microsoft.Office.Interop.Word;

// ❌ 错误 - 混乱的using语句
using Microsoft.Office.Interop.Word;
using System;
using System.Drawing;
```

## 异常处理

### 简化异常处理
```csharp
// ✅ 正确 - 简化异常处理
try
{
    var result = SomeWordAPIOperation();
}
catch (Exception ex)
{
    MessageBox.Show($"操作失败：{ex.Message}", "错误", MessageBoxButtons.OK, MessageBoxIcon.Error);
}

// ❌ 错误 - 过度复杂的异常处理
try
{
    try
    {
        var result = SomeWordAPIOperation();
    }
    catch (SpecificException ex)
    {
        // 复杂的异常处理逻辑
    }
}
catch (Exception ex)
{
    // 更多异常处理
}
```

## 代码复用

### 适度复用
```csharp
// ✅ 正确 - 通用方法复用
private void InitializeComboBox(ComboBox comboBox, IEnumerable<string> items)
{
    comboBox.Items.Clear();
    comboBox.Items.AddRange(items.ToArray());
}

// ✅ 正确 - 数据转换复用
public static decimal ConvertUnits(decimal value, string fromUnit, string toUnit)
{
    // 统一的单位转换逻辑
}
```

## 文件组织

### 项目结构
```
WordMan_VSTO/
├── ThisAddIn.cs              # VSTO插件入口
├── MainRibbon.cs             # 功能区界面
├── MultiLevel/               # 多级列表功能
│   ├── MultiLevelListForm.cs
│   ├── LevelStyleSettingsForm.cs
│   ├── MultiLevelDataManager.cs
│   └── WordStyleInfo.cs
└── StyleSetting/             # 样式设置模块
    ├── StyleSettings.cs
    └── StyleSettingsUIDesigner.cs
```

## 开发检查清单

在提交代码前，请确保：

1. ✅ 基于 .NET 4.0 框架
2. ✅ 优先使用 Word API
3. ✅ 避免不必要的抽象
4. ✅ 遵循命名规范
5. ✅ 明确所有引用
6. ✅ 简化异常处理
7. ✅ 适度代码复用
8. ✅ 保持代码简洁
9. ✅ 支持 Windows 7 + Office 2013
10. ✅ 具备广泛兼容性

## 注意事项

- 所有 Word 相关操作尽量通过 Word API
- 避免创建不必要的辅助类
- 保持代码简洁直接
- 确保向后兼容性
- 明确指定命名空间避免歧义