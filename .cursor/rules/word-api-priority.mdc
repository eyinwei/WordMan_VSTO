---
alwaysApply: true
description: Word API优先原则和WordAPIHelper使用指南
globs: *.cs
---

# Word API 优先原则和 WordAPIHelper 使用指南

## 核心原则

**所有与Word相关的功能必须优先使用Word API，并通过WordAPIHelper.cs统一管理**

## 必须遵循的规则

### 1. Word API 优先使用
- ✅ **优先使用**: `Microsoft.Office.Interop.Word` API
- ❌ **避免使用**: 硬编码的数值、自定义计算、第三方库
- 📁 **参考文件**: [WordAPIHelper.cs](mdc:WordAPIHelper.cs)

### 2. 单位转换必须使用Word API
```csharp
// ✅ 正确 - 使用Word API
decimal centimeters = (decimal)app.PointsToCentimeters(points);
float points = app.CentimetersToPoints(centimeters);

// ❌ 错误 - 硬编码转换
decimal centimeters = points * 0.0352778f; // 不要这样做
```

### 3. 字体和样式必须通过Word API
```csharp
// ✅ 正确 - 使用WordAPIHelper
var fonts = WordAPIHelper.GetSystemFonts();
var fontSizes = WordAPIHelper.GetFontSizes();
float fontSize = WordAPIHelper.ConvertFontSize(sizeText);

// ❌ 错误 - 直接使用系统字体
var fonts = System.Drawing.FontFamily.Families; // 不要这样做
```

### 4. 数值输入控件必须集成Word API
参考 [MultiLevelList.cs](mdc:MultiLevelList.cs) 中的 `NumericUpDownWithUnit` 类：
```csharp
// ✅ 正确 - 构造函数接受Word Application
public NumericUpDownWithUnit(Microsoft.Office.Interop.Word.Application wordApp = null, UnitType unit = UnitType.Centimeters)

// ✅ 正确 - 使用Word API进行单位转换
public decimal ValueInCentimeters
{
    get
    {
        switch (_currentUnit)
        {
            case UnitType.Characters:
                return ConvertCharactersToCentimeters(Value);
            case UnitType.Centimeters:
                return Value;
            case UnitType.Points:
                return (decimal)_wordApp.PointsToCentimeters((float)Value);
        }
    }
}
```

### 5. 必须使用WordAPIHelper的方法
```csharp
// ✅ 正确 - 使用WordAPIHelper统一管理
var app = WordAPIHelper.GetWordApplication();
var doc = WordAPIHelper.GetActiveDocument();
var fonts = WordAPIHelper.GetSystemFonts();
var fontSizes = WordAPIHelper.GetFontSizes();
float convertedSize = WordAPIHelper.ConvertFontSize("12");
float convertedUnits = WordAPIHelper.ConvertUnits("10", "厘米", "磅");
```

### 6. 错误处理必须包含Word API异常
```csharp
try
{
    // 使用Word API
    var result = app.SomeWordAPIMethod();
}
catch (Exception ex)
{
    throw new Exception($"Word API调用失败：{ex.Message}");
}
```

## 禁止的做法

### ❌ 不要硬编码转换值
```csharp
// 错误示例
float points = centimeters * 28.35f; // 不要硬编码
decimal charWidth = fontSize * 0.5m; // 不要估算
```

### ❌ 不要直接使用系统API替代Word API
```csharp
// 错误示例
var installedFonts = new System.Drawing.Text.InstalledFontCollection(); // 不要直接使用
var font = new System.Drawing.Font(fontName, size); // 不要直接创建
```

### ❌ 不要绕过WordAPIHelper
```csharp
// 错误示例
var app = Globals.ThisAddIn.Application; // 不要直接获取
var doc = app.ActiveDocument; // 不要直接访问
```

## 推荐的做法

### ✅ 使用WordAPIHelper统一管理
```csharp
// 推荐做法
var app = WordAPIHelper.GetWordApplication();
var doc = WordAPIHelper.GetActiveDocument();
var fonts = WordAPIHelper.GetSystemFonts();
```

### ✅ 在自定义控件中集成Word API
```csharp
// 推荐做法 - 参考NumericUpDownWithUnit
public class CustomControl : Control
{
    private Microsoft.Office.Interop.Word.Application _wordApp;
    
    public CustomControl(Microsoft.Office.Interop.Word.Application wordApp = null)
    {
        _wordApp = wordApp ?? WordAPIHelper.GetWordApplication();
    }
}
```

### ✅ 使用Word API进行精确计算
```csharp
// 推荐做法
private decimal ConvertCharactersToCentimeters(decimal characters)
{
    try
    {
        if (_wordApp?.Selection?.Range?.Font?.Size != null)
        {
            float fontSize = _wordApp.Selection.Range.Font.Size;
            // 使用Word API计算字符宽度
            var tempRange = _wordApp.Selection.Range;
            // ... 使用Word API进行精确计算
        }
    }
    catch (Exception ex)
    {
        // 使用Word API的备用方案
    }
}
```

## 文件引用

- **主要工具类**: [WordAPIHelper.cs](mdc:WordAPIHelper.cs) - 统一管理所有Word API调用
- **实现示例**: [MultiLevelList.cs](mdc:MultiLevelList.cs) - 展示如何正确集成Word API
- **自定义控件**: 参考 `NumericUpDownWithUnit` 类的实现方式

## 检查清单

在编写任何与Word相关的代码时，请确保：

1. ✅ 使用了 `Microsoft.Office.Interop.Word` API
2. ✅ 通过 `WordAPIHelper` 获取Word应用程序实例
3. ✅ 使用Word API进行单位转换
4. ✅ 使用Word API获取字体和样式信息
5. ✅ 在自定义控件中集成了Word API
6. ✅ 包含了适当的错误处理
7. ✅ 没有硬编码的转换值
8. ✅ 没有绕过WordAPIHelper直接访问Word对象

**记住：Word API优先，WordAPIHelper统一管理，确保所有功能都通过Word API实现！**